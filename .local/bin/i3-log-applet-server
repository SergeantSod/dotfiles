#! /usr/bin/env python

import gobject

import dbus
import dbus.service
import dbus.mainloop.glib

import i3ipc

import thread

class LogAppletProxy(dbus.service.Object):
    def __init__(self, conn, object_path='/org/xmonad/Log'):
        dbus.service.Object.__init__(self, conn, object_path)

    @dbus.service.signal('org.xmonad.Log')
    def Update(self, message):
        pass


def i3_event_loop(log_applet, gobject_main_loop):

    def on_window_focus(i3, event):
        log_applet.Update(event.container.name)
    try:
        print("connecting to i3.")
        i3 = i3ipc.Connection()
        i3.on("window::focus", on_window_focus)
        i3.main()
    finally:
        gobject_main_loop.quit()



if __name__ == '__main__':
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    gobject.threads_init()
    dbus.mainloop.glib.threads_init()

    session_bus = dbus.SessionBus()
    name = dbus.service.BusName('org.xmonad.Log', session_bus)
    log_applet = LogAppletProxy(session_bus)

    gobject_main_loop = gobject.MainLoop()

    thread.start_new_thread(i3_event_loop, (log_applet, gobject_main_loop))

    print "Running example signal emitter service."
    gobject_main_loop.run()
